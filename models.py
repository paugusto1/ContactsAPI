# generated by datamodel-codegen:
#   filename:  model.json
#   timestamp: 2022-09-22T00:19:29+00:00

from __future__ import annotations

from datetime import date
from typing import Any, List, Optional

from pydantic import BaseModel, EmailStr, Extra, Field


class AddressSingle(BaseModel):
    class Config:
        extra = Extra.forbid

    apartment: Optional[str] = Field(None, description="Contact's city")
    street: Optional[str] = Field(None, description="Contact's street")
    city: Optional[str] = Field(None, description="Contact's city")
    state: Optional[str] = Field(None, description="Contact's state")
    postalCode: Optional[str] = Field(None, description='Postal code')
    country: Optional[str] = Field(None, description='Country')


class Address(BaseModel):
    __root__: List[AddressSingle] = Field(
        ..., description='Defines a list of addresses.'
    )


class EmailSingle(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str = Field(..., description="Contact's email type")
    value: EmailStr = Field(..., description="Contact's email")


class Email(BaseModel):
    __root__: List[EmailSingle] = Field(..., description='Defines a list of emails.')


class PhoneNumberSingle(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str = Field(..., description="Contact's phone type")
    value: str = Field(..., description="Contact's phone")


class PhoneNumber(BaseModel):
    __root__: List[PhoneNumberSingle] = Field(
        ..., description='Defines a list of phone numbers.'
    )


class PersonDetails(BaseModel):
    class Config:
        extra = Extra.forbid

    firstName: str = Field(..., description="Contact's first name")
    lastName: str = Field(..., description="Contact's second name")
    dateOfBirth: Optional[date] = Field(None, description="Contact's birthdate")


class Contact(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[Any] = Field(None, description='Contact id.')
    personDetails: PersonDetails = Field(..., description='Contact details.')
    company: Optional[str] = Field(None, description="Contact's company")
    profileImage: Optional[str] = Field(None, description="Contact's profile image")
    email: Email = Field(..., description='Contact emails')
    phoneNumber: Optional[PhoneNumber] = Field(None, description='Contact phonenumbers')
    address: Optional[Address] = Field(None, description='List of contact addresses.')


class Contacts(BaseModel):
    __root__: List[Contact] = Field(
        ..., description='Defines a list of contacts.', title='Contacts'
    )
